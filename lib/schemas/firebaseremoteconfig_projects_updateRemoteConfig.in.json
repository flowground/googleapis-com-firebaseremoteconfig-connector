{
    "type": "object",
    "properties": {
        "project": {
            "required": true,
            "type": "string"
        },
        "validateOnly": {
            "type": "boolean"
        },
        "alt": {
            "type": "string",
            "enum": [
                "json",
                "media",
                "proto"
            ],
            "default": "json"
        },
        "bearer_token": {
            "type": "string"
        },
        "callback": {
            "type": "string"
        },
        "fields": {
            "type": "string"
        },
        "key": {
            "type": "string"
        },
        "oauth_token": {
            "type": "string"
        },
        "pp": {
            "type": "boolean",
            "default": true
        },
        "prettyPrint": {
            "type": "boolean",
            "default": true
        },
        "quotaUser": {
            "type": "string"
        },
        "uploadType": {
            "type": "string"
        },
        "upload_protocol": {
            "type": "string"
        },
        "requestBody": {
            "description": "*\nThe RemoteConfig consists of a list of conditions (which can be\nthought of as named \"if\" statements) and a map of parameters (parameter key\nto a structure containing an optional default value, as well as a optional\nsubmap of (condition name to value when that condition is true).",
            "properties": {
                "conditions": {
                    "description": "The list of named conditions. The order *does* affect the semantics.\nThe condition_name values of these entries must be unique.\n\nThe resolved value of a config parameter P is determined as follow:\n* Let Y be the set of values from the submap of P that refer to conditions\n  that evaluate to <code>true</code>.\n* If Y is non empty, the value is taken from the specific submap in Y whose\n  condition_name is the earliest in this condition list.\n* Else, if P has a default value option (condition_name is empty) then\n  the value is taken from that option.\n* Else, parameter P has no value and is omitted from the config result.\n\nExample: parameter key \"p1\", default value \"v1\", submap specified as\n{\"c1\": v2, \"c2\": v3} where \"c1\" and \"c2\" are names of conditions in the\ncondition list (where \"c1\" in this example appears before \"c2\").  The\nvalue of p1 would be v2 as long as c1 is true.  Otherwise, if c2 is true,\np1 would evaluate to v3, and if c1 and c2 are both false, p1 would evaluate\nto v1.  If no default value was specified, and c1 and c2 were both false,\nno value for p1 would be generated.",
                    "items": {
                        "description": "A single RemoteConfig Condition.  A list of these (because order matters) are\npart of a single RemoteConfig template.",
                        "properties": {
                            "description": {
                                "description": "DO NOT USE. Implementation removed and will not be added unless requested.\nA description for this Condition. Length must be less than or equal to\n100 characters (or more precisely, unicode code points, which is defined in\njava/com/google/wireless/android/config/ConstsExporter.java).\nA description may contain any Unicode characters",
                                "type": "string"
                            },
                            "expression": {
                                "description": "Required.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Required.\nA non empty and unique name of this condition.",
                                "type": "string"
                            },
                            "tagColor": {
                                "description": "Optional.\nThe display (tag) color of this condition. This serves as part of a tag\n(in the future, we may add tag text as well as tag color, but that is not\nyet implemented in the UI).\nThis value has no affect on the semantics of the delivered config and it\nis ignored by the backend, except for passing it through write/read\nrequests.\nNot having this value or having the \"CONDITION_DISPLAY_COLOR_UNSPECIFIED\"\nvalue (0) have the same meaning:  Let the UI choose any valid color when\ndisplaying the condition.",
                                "enum": [
                                    "CONDITION_DISPLAY_COLOR_UNSPECIFIED",
                                    "BLUE",
                                    "BROWN",
                                    "CYAN",
                                    "DEEP_ORANGE",
                                    "GREEN",
                                    "INDIGO",
                                    "LIME",
                                    "ORANGE",
                                    "PINK",
                                    "PURPLE",
                                    "TEAL"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "parameters": {
                    "additionalProperties": {
                        "description": "While default_value and conditional_values are each optional, at least one of\nthe two is required - otherwise, the parameter is meaningless (and an\nexception will be thrown by the validation logic).",
                        "properties": {
                            "conditionalValues": {
                                "additionalProperties": {
                                    "description": "A RemoteConfigParameter's \"value\" (either the default value, or the value\nassociated with a condition name) is either a string, or the\n\"use_in_app_default\" indicator (which means to leave out the parameter from\nthe returned <key, value> map that is the output of the parameter fetch).\nWe represent the \"use_in_app_default\" as a bool, but (when using the boolean\ninstead of the string) it should always be <code>true</code>.",
                                    "properties": {
                                        "useInAppDefault": {
                                            "description": "if true, omit the parameter from the map of fetched parameter values",
                                            "type": "boolean"
                                        },
                                        "value": {
                                            "description": "the string to set the parameter to",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "description": "Optional - a map of (condition_name, value). The condition_name of the\nhighest priority (the one listed first in the conditions array) determines\nthe value of this parameter.",
                                "type": "object"
                            },
                            "defaultValue": {
                                "description": "Optional - value to set the parameter to, when none of the named conditions\nevaluate to <code>true</code>.",
                                "properties": {
                                    "useInAppDefault": {
                                        "description": "if true, omit the parameter from the map of fetched parameter values",
                                        "type": "boolean"
                                    },
                                    "value": {
                                        "description": "the string to set the parameter to",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "description": {
                                "description": "Optional.\nA description for this Parameter. Length must be less than or equal to\n100 characters (or more precisely, unicode code points, which is defined in\njava/com/google/wireless/android/config/ConstsExporter.java).\nA description may contain any Unicode characters",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "description": "Map of parameter keys to their optional default values and optional submap\nof (condition name : value). Order doesn't affect semantics, and so is\nsorted by the server. The 'key' values of the params must be unique.",
                    "type": "object"
                }
            },
            "type": "object"
        }
    }
}